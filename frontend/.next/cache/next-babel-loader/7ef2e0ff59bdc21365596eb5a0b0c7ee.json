{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth } from './auth';\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = () => {\n  return fetch(`${API}/blogs`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log('search params', params);\n  let query = queryString.stringify(params);\n  console.log('query params', params);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/jongraybill/Desktop/programming/seo-blog/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","singleBlog","slug","listRelated","list","removeBlog","updateBlog","listSearch","params","query"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport {isAuth} from './auth';\n\nexport const createBlog = (blog, token) => {\n\n    let createBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/blog`\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/user/blog`\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n    const data = {\n        limit,\n        skip\n    };\n    return fetch(`${API}/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const singleBlog = slug => {\n    return fetch(`${API}/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listRelated = blog => {\n    return fetch(`${API}/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const list = () => {\n    return fetch(`${API}/blogs`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n    return fetch(`${API}/blog/${slug}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n    return fetch(`${API}/blog/${slug}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listSearch = (params) => {\n    console.log('search params', params);\n    let query = queryString.stringify(params);\n    console.log('query params', params);\n    return fetch(`${API}/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}